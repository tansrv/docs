{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"en/cfg/","text":"server \u00b6 Option Description Default Availability listen Listen port 2579 1.0.0+ client_max_body_size None 16384 (bytes) 2.0.0+ request_timeout None 60 (seconds) 1.0.0+ ssl \u00b6 Option Description Default Availability ssl_cert_file Certificate path cert.pem 1.0.0+ ssl_key_file Private key path cert.key 1.0.0+ database \u00b6 pgsql \u00b6 Option Description Default Availability hostaddr Database server IP address 127.0.0.1 1.0.0+ port Listen port 5432 1.0.0+ user User postgres 1.0.0+ password Password postgres 1.0.0+ database Database postgres 1.0.0+ log \u00b6 Option Description Default Availability directory Log file path /var/log/tanserver/ 1.0.0+ shipper \u00b6 Option Description Default Availability listen Listen port 1117 1.0.0+ hostname Host name tanserver 1.0.0+ allowlist Client IP addresses None 1.0.0+ Note The hostname of each server should be inconsistent.","title":"Configuration"},{"location":"en/cfg/#server","text":"Option Description Default Availability listen Listen port 2579 1.0.0+ client_max_body_size None 16384 (bytes) 2.0.0+ request_timeout None 60 (seconds) 1.0.0+","title":"server"},{"location":"en/cfg/#ssl","text":"Option Description Default Availability ssl_cert_file Certificate path cert.pem 1.0.0+ ssl_key_file Private key path cert.key 1.0.0+","title":"ssl"},{"location":"en/cfg/#database","text":"","title":"database"},{"location":"en/cfg/#pgsql","text":"Option Description Default Availability hostaddr Database server IP address 127.0.0.1 1.0.0+ port Listen port 5432 1.0.0+ user User postgres 1.0.0+ password Password postgres 1.0.0+ database Database postgres 1.0.0+","title":"pgsql"},{"location":"en/cfg/#log","text":"Option Description Default Availability directory Log file path /var/log/tanserver/ 1.0.0+","title":"log"},{"location":"en/cfg/#shipper","text":"Option Description Default Availability listen Listen port 1117 1.0.0+ hostname Host name tanserver 1.0.0+ allowlist Client IP addresses None 1.0.0+ Note The hostname of each server should be inconsistent.","title":"shipper"},{"location":"en/commands/","text":"/etc/init.d tanserver start Description: Start tanserver. Availability: 1.0.0+ /etc/init.d tanserver status Description: Check the status. Note: If the server is running, it will include uptime, active connections and handled requests. Availability: 1.0.0+ /etc/init.d tanserver reload Description: Reload user APIs. Note 1: This feature can be used in a production environment. Note 2: If reload fails, an error message will be displayed on the screen, which will not cause negative effects. Availability: 1.0.0+ /etc/init.d tanserver stop Description: Stop tanserver. Note: The worker processes will exit after processing all events, so it is safe. Availability: 1.0.0+ /etc/init.d tanserver restart Description: Restart tanserver. Note: This will apply the new configuration. Availability: 1.0.3+ /etc/init.d tanserver configtest Description: Test configuration. Note: This does not test whether the database connection is available. Availability: 1.0.0+ /etc/init.d tanserver version Description: Check the version. Availability: 1.0.0+","title":"Commands"},{"location":"en/editor/","text":"Install VS Code \u00b6 VS Code Extension requirements \u00b6 Remote-SSH , used to connect to a remote server. Python Open user_api directory \u00b6 Start VS Code and connect to your remote server. Open /usr/local/tanserver/user_api/ directory. Info Examples: user_api/example.py","title":"Set up an editor"},{"location":"en/editor/#install-vs-code","text":"VS Code","title":"Install VS Code"},{"location":"en/editor/#extension-requirements","text":"Remote-SSH , used to connect to a remote server. Python","title":"Extension requirements"},{"location":"en/editor/#open-user_api-directory","text":"Start VS Code and connect to your remote server. Open /usr/local/tanserver/user_api/ directory. Info Examples: user_api/example.py","title":"Open user_api directory"},{"location":"en/examples/","text":"API: hello_tanserver \u00b6 Get username from JSON string sent by the client. If username is tanserver then send {\"hello\": \"tanserver\"} to the client. Otherwise send {\"error\": \"unknown username\"} . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def hello_tanserver ( json_obj ): # Get username user = json_obj . get ( 'username' ) if user == None : return 'missing username' data = {} if user == 'tanserver' : # {\"hello\":\"tanserver\"} data [ 'hello' ] = 'tanserver' else : # {\"error\":\"unknown username\"} data [ 'error' ] = 'unknown username' return json . dumps ( data ) API: append_status \u00b6 Append status code and message to JSON string. 1 2 3 4 5 def append_status ( json_obj ): str = '{ \\\" id \\\" :0}' # Send {\"status\": 200, \"message\": \"ok\", \"result\": {\"id\": 0}} return json_append_status ( str , 200 , 'ok' ) API: login_register \u00b6 Get id and password from JSON string sent by the client. Check if the user exists. If the user exists, convert the row to a JSON string and send it to the client. Otherwise, complete the registration and send {\"msg\": \"Registration successful\"} . users id password age 0 mypwd 21 1 mypwd2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def login_register ( json_obj ): # Get id and password id = json_obj . get ( 'id' ) pwd = json_obj . get ( 'password' ) if id == None or pwd == None : return 'missing id or password' try : # Query database and get JSON string. # \"127.0.0.1\": Database server IP address. Edit in /etc/tanserver.conf. # row_to_json(): pgSQL JSON function res = pg_query ( '127.0.0.1' , 'select row_to_json(users) from users where id = $1 and password = $2' , id , pwd ) # If 'res' is an empty string, it means there is no such user. if res == '' : # Complete registration. pg_query ( '127.0.0.1' , 'insert into users values($1, $2, $3)' , id , pwd , '16' ) data = {} data [ 'msg' ] = 'registration successful' # Send {\"msg\": \"registration successful\"} return json . dumps ( data ) # Send JSON string, like: {\"id\": 0, \"password\": \"mypwd\", \"age\": 21} return res except : # Database query failed, the reason will be automatically written to the log file. return 'Query failed' API: get_items \u00b6 Convert items table data into JSON string and send it to the client. items id name price 0 book 5 1 keyboard 200 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_items ( json_obj ): try : res = pg_query ( '127.0.0.1' , 'select array_to_json(array_agg(row_to_json(items))) from items' ) # Send # { # \"status\":0, # \"message\":\"OK\", # \"result\":[ # { # \"id\":0, # \"name\":\"book\", # \"price\":5 # }, # { # \"id\":1, # \"name\":\"keyboard\", # \"price\":200 # } # ] # } return json_append_status ( res , 0 , 'OK' ) # Exclude price, send # { # \"status\":200, # \"message\":\"OK\", # \"result\":[ # { # \"id\":0, # \"name\":\"book\", # }, # { # \"id\":1, # \"name\":\"keyboard\", # } # ] # } # res = pg_query('127.0.0.1', # 'select array_to_json(array_agg(json_build_object('id', id, 'name', name))) from items') # return json_append_status(res, 200, 'OK') except : return 'Query failed' API: transaction \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def transaction ( json_obj ): try : pg_query ( '127.0.0.1' , 'begin' ) pg_query ( '127.0.0.1' , 'update accounts set num = num - $1 where name = $2' , '10' , 'Jack' ) pg_query ( '127.0.0.1' , 'update accounts set num = num + $1 where name = $2' , '10' , 'Mike' ) pg_query ( '127.0.0.1' , 'commit' ) # Send \"OK\" return 'OK' except : pg_query ( '127.0.0.1' , 'rollback' ) return 'Query failed'","title":"Examples"},{"location":"en/examples/#api-hello_tanserver","text":"Get username from JSON string sent by the client. If username is tanserver then send {\"hello\": \"tanserver\"} to the client. Otherwise send {\"error\": \"unknown username\"} . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def hello_tanserver ( json_obj ): # Get username user = json_obj . get ( 'username' ) if user == None : return 'missing username' data = {} if user == 'tanserver' : # {\"hello\":\"tanserver\"} data [ 'hello' ] = 'tanserver' else : # {\"error\":\"unknown username\"} data [ 'error' ] = 'unknown username' return json . dumps ( data )","title":"API: hello_tanserver"},{"location":"en/examples/#api-append_status","text":"Append status code and message to JSON string. 1 2 3 4 5 def append_status ( json_obj ): str = '{ \\\" id \\\" :0}' # Send {\"status\": 200, \"message\": \"ok\", \"result\": {\"id\": 0}} return json_append_status ( str , 200 , 'ok' )","title":"API: append_status"},{"location":"en/examples/#api-login_register","text":"Get id and password from JSON string sent by the client. Check if the user exists. If the user exists, convert the row to a JSON string and send it to the client. Otherwise, complete the registration and send {\"msg\": \"Registration successful\"} . users id password age 0 mypwd 21 1 mypwd2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def login_register ( json_obj ): # Get id and password id = json_obj . get ( 'id' ) pwd = json_obj . get ( 'password' ) if id == None or pwd == None : return 'missing id or password' try : # Query database and get JSON string. # \"127.0.0.1\": Database server IP address. Edit in /etc/tanserver.conf. # row_to_json(): pgSQL JSON function res = pg_query ( '127.0.0.1' , 'select row_to_json(users) from users where id = $1 and password = $2' , id , pwd ) # If 'res' is an empty string, it means there is no such user. if res == '' : # Complete registration. pg_query ( '127.0.0.1' , 'insert into users values($1, $2, $3)' , id , pwd , '16' ) data = {} data [ 'msg' ] = 'registration successful' # Send {\"msg\": \"registration successful\"} return json . dumps ( data ) # Send JSON string, like: {\"id\": 0, \"password\": \"mypwd\", \"age\": 21} return res except : # Database query failed, the reason will be automatically written to the log file. return 'Query failed'","title":"API: login_register"},{"location":"en/examples/#api-get_items","text":"Convert items table data into JSON string and send it to the client. items id name price 0 book 5 1 keyboard 200 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def get_items ( json_obj ): try : res = pg_query ( '127.0.0.1' , 'select array_to_json(array_agg(row_to_json(items))) from items' ) # Send # { # \"status\":0, # \"message\":\"OK\", # \"result\":[ # { # \"id\":0, # \"name\":\"book\", # \"price\":5 # }, # { # \"id\":1, # \"name\":\"keyboard\", # \"price\":200 # } # ] # } return json_append_status ( res , 0 , 'OK' ) # Exclude price, send # { # \"status\":200, # \"message\":\"OK\", # \"result\":[ # { # \"id\":0, # \"name\":\"book\", # }, # { # \"id\":1, # \"name\":\"keyboard\", # } # ] # } # res = pg_query('127.0.0.1', # 'select array_to_json(array_agg(json_build_object('id', id, 'name', name))) from items') # return json_append_status(res, 200, 'OK') except : return 'Query failed'","title":"API: get_items"},{"location":"en/examples/#api-transaction","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def transaction ( json_obj ): try : pg_query ( '127.0.0.1' , 'begin' ) pg_query ( '127.0.0.1' , 'update accounts set num = num - $1 where name = $2' , '10' , 'Jack' ) pg_query ( '127.0.0.1' , 'update accounts set num = num + $1 where name = $2' , '10' , 'Mike' ) pg_query ( '127.0.0.1' , 'commit' ) # Send \"OK\" return 'OK' except : pg_query ( '127.0.0.1' , 'rollback' ) return 'Query failed'","title":"API: transaction"},{"location":"en/first_api/","text":"First API \u00b6 Send hello, world to the client. Create a .py file \u00b6 Create hello.py in /usr/local/tanserver/user_api/ directory. API: hello_world \u00b6 1 2 3 4 5 6 # hello.py from tanserver import * def hello_world ( json_obj ): return 'hello, world' Note Run sudo /etc/init.d/tanserver reload to reload APIs. When the client calls getJSON(\"hello_world\", \"{}\") :","title":"Write your first API"},{"location":"en/first_api/#first-api","text":"Send hello, world to the client.","title":"First API"},{"location":"en/first_api/#create-a-py-file","text":"Create hello.py in /usr/local/tanserver/user_api/ directory.","title":"Create a .py file"},{"location":"en/first_api/#api-hello_world","text":"1 2 3 4 5 6 # hello.py from tanserver import * def hello_world ( json_obj ): return 'hello, world' Note Run sudo /etc/init.d/tanserver reload to reload APIs. When the client calls getJSON(\"hello_world\", \"{}\") :","title":"API: hello_world"},{"location":"en/install/","text":"Install tanserver \u00b6 RedHat / CentOS 7+ 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x yum-install.sh && sudo ./yum-install.sh Debian 9+ / Ubuntu 16+ 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x apt-install.sh && sudo ./apt-install.sh Arch 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x pacman-install.sh && sudo ./pacman-install.sh Bug If there is a problem during installation, please create an issue .","title":"Install"},{"location":"en/install/#install-tanserver","text":"RedHat / CentOS 7+ 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x yum-install.sh && sudo ./yum-install.sh Debian 9+ / Ubuntu 16+ 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x apt-install.sh && sudo ./apt-install.sh Arch 1 2 3 git clone https://github.com/tansrv/tanserver.git cd tanserver/install chmod +x pacman-install.sh && sudo ./pacman-install.sh Bug If there is a problem during installation, please create an issue .","title":"Install tanserver"},{"location":"en/install_shipper/","text":"Install tanshipper \u00b6 RedHat / CentOS 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x yum-install.sh && sudo ./yum-install.sh Debian / Ubuntu 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x apt-install.sh && sudo ./apt-install.sh Arch 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x pacman-install.sh && sudo ./pacman-install.sh Bug If there is a problem during installation, please create an issue .","title":"Install"},{"location":"en/install_shipper/#install-tanshipper","text":"RedHat / CentOS 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x yum-install.sh && sudo ./yum-install.sh Debian / Ubuntu 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x apt-install.sh && sudo ./apt-install.sh Arch 1 2 3 git clone https://github.com/tansrv/tanshipper.git cd tanshipper/install chmod +x pacman-install.sh && sudo ./pacman-install.sh Bug If there is a problem during installation, please create an issue .","title":"Install tanshipper"},{"location":"en/install_ssl/","text":"Get a free SSL certificate \u00b6 ZeroSSL - Before requesting an SSL certificate, you should have a domain name. Note The domain name used to request the SSL certificate should resolve to your server IP address. Download certificate \u00b6 Select NGINX and download the certificate. Merge certificate \u00b6 Merge certificate.crt and ca_bundle.crt into a single certificate.crt file, like: 1 2 3 4 5 6 -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- Install certificate \u00b6 Upload certificate.crt and private.key to your Linux server. Edit configuration file: /etc/tanserver.conf . Change ssl_cert_file = your certificate , ssl_key_file = your private key . Warning Do not use a self-signed certificate.","title":"Install SSL certificate"},{"location":"en/install_ssl/#get-a-free-ssl-certificate","text":"ZeroSSL - Before requesting an SSL certificate, you should have a domain name. Note The domain name used to request the SSL certificate should resolve to your server IP address.","title":"Get a free SSL certificate"},{"location":"en/install_ssl/#download-certificate","text":"Select NGINX and download the certificate.","title":"Download certificate"},{"location":"en/install_ssl/#merge-certificate","text":"Merge certificate.crt and ca_bundle.crt into a single certificate.crt file, like: 1 2 3 4 5 6 -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----","title":"Merge certificate"},{"location":"en/install_ssl/#install-certificate","text":"Upload certificate.crt and private.key to your Linux server. Edit configuration file: /etc/tanserver.conf . Change ssl_cert_file = your certificate , ssl_key_file = your private key . Warning Do not use a self-signed certificate.","title":"Install certificate"},{"location":"en/java/","text":"Get connector \u00b6 git clone https://github.com/tansrv/tanserver-connectors.git Install \u00b6 Copy java/tan directory to your project and import it. Requirements \u00b6 Platform Version Java 7+ Android 7.0+ Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import tan.Tanserver ; import java.io.IOException ; /* Initialize connection information. */ Tanserver tan = new Tanserver ( \"tanserver.org\" , 2579 ); /* Get JSON string from the server. */ tan . getJSON ( \"api\" , \"{}\" , new Tanserver . Callback () { @Override public void onSuccess ( String jsonString ) { System . out . println ( jsonString ); } @Override public void onFailure ( IOException err ) { /* An error has occurred, notify the user of network failure. */ System . out . println ( \"ERROR! \" + err . getMessage ()); } }); getJSON() \u00b6 Declaration void getJSON(String userApi, String jsonString, Callback callback) Description Get JSON string from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param callback Need to implement void onSuccess(String jsonString) and void onFailure(IOException err) . When the request is successful, onSuccess() will be called, otherwise onFailure() will be called. Note Android should add <uses-permission android:name=\"android.permission.INTERNET\"/> in AndroidManifest.xml . Common reasons why onFailure() is called \u00b6 The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string. jsonString is too large and exceeds client_max_body_size .","title":"Java"},{"location":"en/java/#get-connector","text":"git clone https://github.com/tansrv/tanserver-connectors.git","title":"Get connector"},{"location":"en/java/#install","text":"Copy java/tan directory to your project and import it.","title":"Install"},{"location":"en/java/#requirements","text":"Platform Version Java 7+ Android 7.0+","title":"Requirements"},{"location":"en/java/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import tan.Tanserver ; import java.io.IOException ; /* Initialize connection information. */ Tanserver tan = new Tanserver ( \"tanserver.org\" , 2579 ); /* Get JSON string from the server. */ tan . getJSON ( \"api\" , \"{}\" , new Tanserver . Callback () { @Override public void onSuccess ( String jsonString ) { System . out . println ( jsonString ); } @Override public void onFailure ( IOException err ) { /* An error has occurred, notify the user of network failure. */ System . out . println ( \"ERROR! \" + err . getMessage ()); } });","title":"Example"},{"location":"en/java/#getjson","text":"Declaration void getJSON(String userApi, String jsonString, Callback callback) Description Get JSON string from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param callback Need to implement void onSuccess(String jsonString) and void onFailure(IOException err) . When the request is successful, onSuccess() will be called, otherwise onFailure() will be called. Note Android should add <uses-permission android:name=\"android.permission.INTERNET\"/> in AndroidManifest.xml .","title":"getJSON()"},{"location":"en/java/#common-reasons-why-onfailure-is-called","text":"The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string. jsonString is too large and exceeds client_max_body_size .","title":"Common reasons why onFailure() is called"},{"location":"en/javascript/","text":"Get connector \u00b6 git clone https://github.com/tansrv/tanserver-connectors.git Install \u00b6 Copy javascript/tanserver.js into your project and include it. Requirements \u00b6 Browser Version Chrome 5+ Edge 12+ Firefox 11+ Safari 5.1+ Chrome Android 18+ Firefox Android 14+ Safari iOS 6+ Example \u00b6 < script src = \"./tanserver.js\" >< /script> < script defer > /* Initialize connection information. */ var tan = new Tanserver ( \"tanserver.org\" , 2579 ); /* Get JSON string from the server. */ tan . getJSON ( 'API' , '{}' , function ( jsonData , err ) { if ( err != null ) { alert ( err ); /* An error has occurred, notify the user of network failure. */ return ; } /* Got a JSON string, parse it here. */ var json = JSON . parse ( jsonData ); ... }); < /script> getJSON() \u00b6 Declaration getJSON(userApi: string, jsonString: string, completion(jsonData, err): function) Description Get JSON answer from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param completion(jsonData, err) jsonData will contain JSON answer from tanserver, if an error occurs, err will not be null. Common causes of errors \u00b6 The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string.","title":"JavaScript"},{"location":"en/javascript/#get-connector","text":"git clone https://github.com/tansrv/tanserver-connectors.git","title":"Get connector"},{"location":"en/javascript/#install","text":"Copy javascript/tanserver.js into your project and include it.","title":"Install"},{"location":"en/javascript/#requirements","text":"Browser Version Chrome 5+ Edge 12+ Firefox 11+ Safari 5.1+ Chrome Android 18+ Firefox Android 14+ Safari iOS 6+","title":"Requirements"},{"location":"en/javascript/#example","text":"< script src = \"./tanserver.js\" >< /script> < script defer > /* Initialize connection information. */ var tan = new Tanserver ( \"tanserver.org\" , 2579 ); /* Get JSON string from the server. */ tan . getJSON ( 'API' , '{}' , function ( jsonData , err ) { if ( err != null ) { alert ( err ); /* An error has occurred, notify the user of network failure. */ return ; } /* Got a JSON string, parse it here. */ var json = JSON . parse ( jsonData ); ... }); < /script>","title":"Example"},{"location":"en/javascript/#getjson","text":"Declaration getJSON(userApi: string, jsonString: string, completion(jsonData, err): function) Description Get JSON answer from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param completion(jsonData, err) jsonData will contain JSON answer from tanserver, if an error occurs, err will not be null.","title":"getJSON()"},{"location":"en/javascript/#common-causes-of-errors","text":"The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string.","title":"Common causes of errors"},{"location":"en/postgresql/","text":"Install PostgreSQL \u00b6 Tanserver currently only supports PostgreSQL . You can connect to 127.0.0.1:5432 after installing PostgreSQL locally. Edit configuration file \u00b6 Edit /etc/tanserver.conf 1 2 3 4 5 6 7 8 9 10 11 database { # pgsql { # hostaddr = 127.0.0.1 # port = 5432 # # user = postgres # password = postgres # # database = postgres # } } Delete # and change to your PostgreSQL information. Note Your pgSQL version should >= 9.2 .","title":"Connect to PostgreSQL"},{"location":"en/postgresql/#install-postgresql","text":"Tanserver currently only supports PostgreSQL . You can connect to 127.0.0.1:5432 after installing PostgreSQL locally.","title":"Install PostgreSQL"},{"location":"en/postgresql/#edit-configuration-file","text":"Edit /etc/tanserver.conf 1 2 3 4 5 6 7 8 9 10 11 database { # pgsql { # hostaddr = 127.0.0.1 # port = 5432 # # user = postgres # password = postgres # # database = postgres # } } Delete # and change to your PostgreSQL information. Note Your pgSQL version should >= 9.2 .","title":"Edit configuration file"},{"location":"en/python_apis/","text":"Import tanserver module \u00b6 from tanserver import * Database \u00b6 Declaration pg_query(hostaddr, query, *args) Description Query database and get the first field of the first row. Param hostaddr Database server IP address. Edit in /etc/tanserver.conf . Param query SQL statement, use $1 , $2 , $3 ... to replace variable arguments. Param *args Variable arguments, only supports string. Exception When an error occurs, the reason will be automatically written to the log file. Return The first field of the first row or an empty string. Availability 2.0.0+ Examples login_register \u2003 get_items \u2003 transaction JSON \u00b6 Declaration json_append_status(json_string, status_code, message) Description Append status code and message to a JSON string. Param json_string The JSON string to be processed. Param status_code The specified status code. Param message The specified message. Return For example: {\"status\":200,\"message\":\"OK\",\"result\":{$json_string}} Availability 2.0.0+ Example append_status","title":"Python APIs"},{"location":"en/python_apis/#import-tanserver-module","text":"from tanserver import *","title":"Import tanserver module"},{"location":"en/python_apis/#database","text":"Declaration pg_query(hostaddr, query, *args) Description Query database and get the first field of the first row. Param hostaddr Database server IP address. Edit in /etc/tanserver.conf . Param query SQL statement, use $1 , $2 , $3 ... to replace variable arguments. Param *args Variable arguments, only supports string. Exception When an error occurs, the reason will be automatically written to the log file. Return The first field of the first row or an empty string. Availability 2.0.0+ Examples login_register \u2003 get_items \u2003 transaction","title":"Database"},{"location":"en/python_apis/#json","text":"Declaration json_append_status(json_string, status_code, message) Description Append status code and message to a JSON string. Param json_string The JSON string to be processed. Param status_code The specified status code. Param message The specified message. Return For example: {\"status\":200,\"message\":\"OK\",\"result\":{$json_string}} Availability 2.0.0+ Example append_status","title":"JSON"},{"location":"en/start/","text":"Start server \u00b6 sudo /etc/init.d/tanserver start Show status \u00b6 sudo /etc/init.d/tanserver status Info If tanserver is still inactive after starting, check the log file: /var/log/tanserver/error.log .","title":"Start server"},{"location":"en/start/#start-server","text":"sudo /etc/init.d/tanserver start","title":"Start server"},{"location":"en/start/#show-status","text":"sudo /etc/init.d/tanserver status Info If tanserver is still inactive after starting, check the log file: /var/log/tanserver/error.log .","title":"Show status"},{"location":"en/start_shipping/","text":"Edit configuration file \u00b6 Edit /etc/tanshipper.conf 1 2 #x.x.x.x:1117 #z.z.z.z:1117 Add connection information (IP address:port), cannot contain spaces. Start shipping \u00b6 sudo /etc/init.d/tanshipper start Note The client IP address should be in the server's allowlist . Check log files \u00b6 Directory: /usr/local/tanshipper/logs/ Restart and apply the new configuration \u00b6 sudo /etc/init.d/tanshipper restart","title":"Start shipping"},{"location":"en/start_shipping/#edit-configuration-file","text":"Edit /etc/tanshipper.conf 1 2 #x.x.x.x:1117 #z.z.z.z:1117 Add connection information (IP address:port), cannot contain spaces.","title":"Edit configuration file"},{"location":"en/start_shipping/#start-shipping","text":"sudo /etc/init.d/tanshipper start Note The client IP address should be in the server's allowlist .","title":"Start shipping"},{"location":"en/start_shipping/#check-log-files","text":"Directory: /usr/local/tanshipper/logs/","title":"Check log files"},{"location":"en/start_shipping/#restart-and-apply-the-new-configuration","text":"sudo /etc/init.d/tanshipper restart","title":"Restart and apply the new configuration"},{"location":"en/swift/","text":"Get connector \u00b6 git clone https://github.com/tansrv/tanserver-connectors.git Install \u00b6 Copy swift/src/Tanserver.swift to your Swift project. Requirements \u00b6 Platform Version iOS 13.0+ macOS 10.15+ Mac Catalyst 13.0+ tvOS 13.0+ watchOS 6.0+ Xcode 11.0+ Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* Initialize connection information. */ let tan = Tanserver ( host : \"tanserver.org\" , port : 2579 ) /* Get JSON data from the server. */ tan . getJSON ( userApi : \"api\" , jsonString : \"{}\" , completion : { jsonData , err in if err != nil { print ( err ) /* An error has occurred, notify the user of network failure. */ return } print ( String ( data : jsonData !, encoding : . utf8 )) }) getJSON() \u00b6 Declaration func getJSON(userApi: String, jsonString: String, completion: @escaping (Data?, NWError?) -> Void) Description Get JSON data from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param completion If an error occurs, NWError will not be nil. Note This is an asynchronous function. Common causes of errors \u00b6 The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string. jsonString is too large and exceeds client_max_body_size .","title":"Swift"},{"location":"en/swift/#get-connector","text":"git clone https://github.com/tansrv/tanserver-connectors.git","title":"Get connector"},{"location":"en/swift/#install","text":"Copy swift/src/Tanserver.swift to your Swift project.","title":"Install"},{"location":"en/swift/#requirements","text":"Platform Version iOS 13.0+ macOS 10.15+ Mac Catalyst 13.0+ tvOS 13.0+ watchOS 6.0+ Xcode 11.0+","title":"Requirements"},{"location":"en/swift/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* Initialize connection information. */ let tan = Tanserver ( host : \"tanserver.org\" , port : 2579 ) /* Get JSON data from the server. */ tan . getJSON ( userApi : \"api\" , jsonString : \"{}\" , completion : { jsonData , err in if err != nil { print ( err ) /* An error has occurred, notify the user of network failure. */ return } print ( String ( data : jsonData !, encoding : . utf8 )) })","title":"Example"},{"location":"en/swift/#getjson","text":"Declaration func getJSON(userApi: String, jsonString: String, completion: @escaping (Data?, NWError?) -> Void) Description Get JSON data from the server. Param userApi API provided by the server. Param jsonString The JSON string that will be sent to the server. Param completion If an error occurs, NWError will not be nil. Note This is an asynchronous function.","title":"getJSON()"},{"location":"en/swift/#common-causes-of-errors","text":"The client is offline or the server is not started. SSL handshake failed. API does not exist. jsonString is an invalid JSON string. jsonString is too large and exceeds client_max_body_size .","title":"Common causes of errors"},{"location":"en/update/","text":"Stop the server \u00b6 Before upgrading, you need to stop the server first. sudo /etc/init.d/tanserver stop Download the latest version \u00b6 git clone https://github.com/tansrv/tanserver.git Update \u00b6 1 2 cd tanserver/src/core/build/ cmake .. && make && make install Note The above update will not overwrite the APIs you have written. Check the version \u00b6 sudo /etc/init.d/tanserver version","title":"Update"},{"location":"en/update/#stop-the-server","text":"Before upgrading, you need to stop the server first. sudo /etc/init.d/tanserver stop","title":"Stop the server"},{"location":"en/update/#download-the-latest-version","text":"git clone https://github.com/tansrv/tanserver.git","title":"Download the latest version"},{"location":"en/update/#update","text":"1 2 cd tanserver/src/core/build/ cmake .. && make && make install Note The above update will not overwrite the APIs you have written.","title":"Update"},{"location":"en/update/#check-the-version","text":"sudo /etc/init.d/tanserver version","title":"Check the version"}]}